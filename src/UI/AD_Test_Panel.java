package UI;

import OFMS.FieldAndRobots;
import PLC_Aux.PLC_Sender;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import OFMS.FieldAndRobots;
import static OFMS.FieldAndRobots.CubeNumbers.PLAYED;
import OFMS.FieldAndRobots.PowerUps;
import static OFMS.FieldAndRobots.PowerUps.Boost;
import static OFMS.FieldAndRobots.PowerUps.Force;
import static OFMS.FieldAndRobots.PowerUps.Levitate;
import java.awt.event.ActionEvent;

/**
 * This class represents a hardware system test designed to be able to test
 * individual or collective stack lights.
 *
 * Complete System developed by:
 *
 * @author Alex Bassett
 * @author Walton Robotics - Team 2974
 * @author Foundation code developed by Josh, Andrew Lobos, Team 225
 * @author Structural assistance and refactoring by Doug Neumann
 */
public class AD_Test_Panel extends javax.swing.JPanel {

    /**
     * This stores the byte representation of the integer 0.
     */
    private static final byte BYTE_ZERO = "0".getBytes()[0];
    /**
     * This stores the byte representation of the "clear" byte; aka Zero.
     */
    private static final byte BYTE_CLEAR = BYTE_ZERO;
    /**
     * A local copy of the test panel.
     */
    private static AD_Test_Panel _instance;

    /**
     * Creates a new Test Panel
     */
    public AD_Test_Panel() {
        if (_instance != null) {
        } else {
            initComponents();
            _instance = this;
        }
    }

    /**
     * Gets the current running instance of this class.
     *
     * @return The AD_Test_Panel "instance".
     */
    public static AD_Test_Panel getInstance() {
        if (_instance != null) {
            return _instance;
        } else {
            System.out.println("Null instance - making new one...");
            return _instance = new AD_Test_Panel();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        red1_red = new javax.swing.JButton();
        red1_amber = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        red2_red = new javax.swing.JButton();
        red2_amber = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        red3_red = new javax.swing.JButton();
        red3_amber = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        blue1_blue = new javax.swing.JButton();
        blue1_amber = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        blue2_blue = new javax.swing.JButton();
        blue2_amber = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        blue3_blue = new javax.swing.JButton();
        blue3_amber = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        forceStandardUpdateButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        blue1_ES_Indic = new javax.swing.JLabel();
        blue2_ES_Indic = new javax.swing.JLabel();
        blue3_ES_Indic = new javax.swing.JLabel();
        red3_ES_Indic = new javax.swing.JLabel();
        red2_ES_Indic = new javax.swing.JLabel();
        red1_ES_Indic = new javax.swing.JLabel();
        field_ES_Indic = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        table_green = new javax.swing.JButton();
        table_red = new javax.swing.JButton();
        table_blue = new javax.swing.JButton();
        table_amber = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        slowblinkall = new javax.swing.JButton();
        mediumspeed = new javax.swing.JButton();
        fastspeed = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        RedVaultBoost_ind = new javax.swing.JLabel();
        RedVaultIndicator = new javax.swing.JLabel();
        BlueVaultBoost_ind = new javax.swing.JLabel();
        BlueVaultForce_Ind = new javax.swing.JLabel();
        BlueVaultIndicator4 = new javax.swing.JLabel();
        BlueVaultLevitate_Ind = new javax.swing.JLabel();
        RedVaultForce_Ind = new javax.swing.JLabel();
        RedVaultLevitate_Ind = new javax.swing.JLabel();
        allon = new javax.swing.JButton();
        alloff = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 0, 0));

        red1_red.setText("Red");
        red1_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red1_redActionPerformed(evt);
            }
        });

        red1_amber.setBackground(new java.awt.Color(255, 153, 51));
        red1_amber.setText("Amber");
        red1_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red1_amberActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Red Team 2");

        red2_red.setText("Red");
        red2_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red2_redActionPerformed(evt);
            }
        });

        red2_amber.setBackground(new java.awt.Color(255, 153, 51));
        red2_amber.setText("Amber");
        red2_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red2_amberActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Red Team 1");

        red3_red.setText("Red");
        red3_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red3_redActionPerformed(evt);
            }
        });

        red3_amber.setBackground(new java.awt.Color(255, 153, 51));
        red3_amber.setText("Amber");
        red3_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                red3_amberActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Red Team 3");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(red1_amber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(red1_red, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(red2_red, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(red2_amber, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(red3_amber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(red3_red, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 9, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(red1_red)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(red1_amber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(2, 2, 2)
                .addComponent(red2_red)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(red2_amber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(red3_red)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(red3_amber)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 0, -1, -1));

        jPanel3.setBackground(new java.awt.Color(0, 0, 255));

        jLabel4.setBackground(new java.awt.Color(0, 0, 0));
        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Blue Team 1");

        blue1_blue.setText("Blue");
        blue1_blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue1_blueActionPerformed(evt);
            }
        });

        blue1_amber.setBackground(new java.awt.Color(255, 153, 51));
        blue1_amber.setText("Amber");
        blue1_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue1_amberActionPerformed(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(0, 0, 0));
        jLabel5.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Blue Team 2");

        blue2_blue.setText("Blue");
        blue2_blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue2_blueActionPerformed(evt);
            }
        });

        blue2_amber.setBackground(new java.awt.Color(255, 153, 51));
        blue2_amber.setText("Amber");
        blue2_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue2_amberActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Blue Team 3");

        blue3_blue.setText("Blue");
        blue3_blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue3_blueActionPerformed(evt);
            }
        });

        blue3_amber.setBackground(new java.awt.Color(255, 153, 51));
        blue3_amber.setText("Amber");
        blue3_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blue3_amberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(blue1_amber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(blue1_blue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(blue2_amber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(blue2_blue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(blue3_amber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(blue3_blue, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue1_blue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue1_amber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue2_blue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue2_amber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue3_blue)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue3_amber)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 118, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 363, -1, -1));

        forceStandardUpdateButton.setText("Force Standard Update");
        forceStandardUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forceStandardUpdateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(forceStandardUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 150, -1, -1));

        jPanel6.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 69, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(263, 589, -1, -1));

        jPanel7.setBackground(new java.awt.Color(51, 51, 51));

        blue1_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        blue1_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        blue1_ES_Indic.setText("1");
        blue1_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        blue1_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        blue1_ES_Indic.setOpaque(true);
        blue1_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        blue2_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        blue2_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        blue2_ES_Indic.setText("2");
        blue2_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        blue2_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        blue2_ES_Indic.setOpaque(true);
        blue2_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        blue3_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        blue3_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        blue3_ES_Indic.setText("3");
        blue3_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        blue3_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        blue3_ES_Indic.setOpaque(true);
        blue3_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        red3_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        red3_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        red3_ES_Indic.setText("3");
        red3_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        red3_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        red3_ES_Indic.setOpaque(true);
        red3_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        red2_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        red2_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        red2_ES_Indic.setText("2");
        red2_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        red2_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        red2_ES_Indic.setOpaque(true);
        red2_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        red1_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        red1_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        red1_ES_Indic.setText("1");
        red1_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        red1_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        red1_ES_Indic.setOpaque(true);
        red1_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        field_ES_Indic.setBackground(new java.awt.Color(204, 204, 204));
        field_ES_Indic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        field_ES_Indic.setText("F");
        field_ES_Indic.setMaximumSize(new java.awt.Dimension(20, 20));
        field_ES_Indic.setMinimumSize(new java.awt.Dimension(20, 20));
        field_ES_Indic.setOpaque(true);
        field_ES_Indic.setPreferredSize(new java.awt.Dimension(20, 20));

        jLabel17.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Blue");

        jLabel18.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Red");

        jLabel19.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Field");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(blue1_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blue2_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blue3_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(red3_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(red2_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(red1_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(field_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(jLabel19))
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(field_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(red1_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(red2_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(red3_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blue3_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blue2_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blue1_ES_Indic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));

        jLabel7.setBackground(new java.awt.Color(0, 0, 0));
        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Table Light");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 11, -1, -1));

        table_green.setBackground(new java.awt.Color(0, 204, 0));
        table_green.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table_green.setText("Green");
        table_green.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_greenActionPerformed(evt);
            }
        });
        jPanel1.add(table_green, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 39, 78, -1));

        table_red.setBackground(new java.awt.Color(255, 0, 0));
        table_red.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table_red.setForeground(new java.awt.Color(153, 153, 153));
        table_red.setText("Red");
        table_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_redActionPerformed(evt);
            }
        });
        jPanel1.add(table_red, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 82, 79, -1));

        table_blue.setBackground(new java.awt.Color(0, 0, 255));
        table_blue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table_blue.setForeground(new java.awt.Color(153, 153, 153));
        table_blue.setText("Blue");
        table_blue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_blueActionPerformed(evt);
            }
        });
        jPanel1.add(table_blue, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 125, 79, -1));

        table_amber.setBackground(new java.awt.Color(255, 153, 51));
        table_amber.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table_amber.setText("Amber");
        table_amber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                table_amberActionPerformed(evt);
            }
        });
        jPanel1.add(table_amber, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 178, -1, -1));

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Field ESTOP");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 156, 89, -1));

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Blink All Lights");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, 108, -1));

        slowblinkall.setText("Slow");
        slowblinkall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                slowblinkallActionPerformed(evt);
            }
        });
        jPanel1.add(slowblinkall, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, -1));

        mediumspeed.setText("Medium");
        mediumspeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumspeedActionPerformed(evt);
            }
        });
        jPanel1.add(mediumspeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, -1, -1));

        fastspeed.setText("Fast");
        fastspeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastspeedActionPerformed(evt);
            }
        });
        jPanel1.add(fastspeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, -1, -1));

        jPanel8.setBackground(new java.awt.Color(204, 0, 204));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Blue Vault:");
        jPanel8.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Red Vault:");
        jPanel8.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 0, -1, -1));

        RedVaultBoost_ind.setBackground(new java.awt.Color(204, 204, 204));
        RedVaultBoost_ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RedVaultBoost_ind.setText("Boost");
        RedVaultBoost_ind.setMaximumSize(new java.awt.Dimension(20, 20));
        RedVaultBoost_ind.setMinimumSize(new java.awt.Dimension(20, 20));
        RedVaultBoost_ind.setOpaque(true);
        RedVaultBoost_ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(RedVaultBoost_ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 42, -1));

        RedVaultIndicator.setBackground(new java.awt.Color(204, 204, 204));
        RedVaultIndicator.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RedVaultIndicator.setText("Vault");
        RedVaultIndicator.setMaximumSize(new java.awt.Dimension(20, 20));
        RedVaultIndicator.setMinimumSize(new java.awt.Dimension(20, 20));
        RedVaultIndicator.setOpaque(true);
        RedVaultIndicator.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(RedVaultIndicator, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 42, -1));

        BlueVaultBoost_ind.setBackground(new java.awt.Color(204, 204, 204));
        BlueVaultBoost_ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BlueVaultBoost_ind.setText("Boost");
        BlueVaultBoost_ind.setMaximumSize(new java.awt.Dimension(20, 20));
        BlueVaultBoost_ind.setMinimumSize(new java.awt.Dimension(20, 20));
        BlueVaultBoost_ind.setOpaque(true);
        BlueVaultBoost_ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(BlueVaultBoost_ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 42, -1));

        BlueVaultForce_Ind.setBackground(new java.awt.Color(204, 204, 204));
        BlueVaultForce_Ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BlueVaultForce_Ind.setText("Force");
        BlueVaultForce_Ind.setMaximumSize(new java.awt.Dimension(20, 20));
        BlueVaultForce_Ind.setMinimumSize(new java.awt.Dimension(20, 20));
        BlueVaultForce_Ind.setOpaque(true);
        BlueVaultForce_Ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(BlueVaultForce_Ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 42, -1));

        BlueVaultIndicator4.setBackground(new java.awt.Color(204, 204, 204));
        BlueVaultIndicator4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BlueVaultIndicator4.setText("Vault");
        BlueVaultIndicator4.setMaximumSize(new java.awt.Dimension(20, 20));
        BlueVaultIndicator4.setMinimumSize(new java.awt.Dimension(20, 20));
        BlueVaultIndicator4.setOpaque(true);
        BlueVaultIndicator4.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(BlueVaultIndicator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 42, -1));

        BlueVaultLevitate_Ind.setBackground(new java.awt.Color(204, 204, 204));
        BlueVaultLevitate_Ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        BlueVaultLevitate_Ind.setText("Levitate");
        BlueVaultLevitate_Ind.setMaximumSize(new java.awt.Dimension(20, 20));
        BlueVaultLevitate_Ind.setMinimumSize(new java.awt.Dimension(20, 20));
        BlueVaultLevitate_Ind.setOpaque(true);
        BlueVaultLevitate_Ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(BlueVaultLevitate_Ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 60, -1));

        RedVaultForce_Ind.setBackground(new java.awt.Color(204, 204, 204));
        RedVaultForce_Ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RedVaultForce_Ind.setText("Force");
        RedVaultForce_Ind.setMaximumSize(new java.awt.Dimension(20, 20));
        RedVaultForce_Ind.setMinimumSize(new java.awt.Dimension(20, 20));
        RedVaultForce_Ind.setOpaque(true);
        RedVaultForce_Ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(RedVaultForce_Ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 90, 42, -1));

        RedVaultLevitate_Ind.setBackground(new java.awt.Color(204, 204, 204));
        RedVaultLevitate_Ind.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RedVaultLevitate_Ind.setText("Levitate");
        RedVaultLevitate_Ind.setMaximumSize(new java.awt.Dimension(20, 20));
        RedVaultLevitate_Ind.setMinimumSize(new java.awt.Dimension(20, 20));
        RedVaultLevitate_Ind.setOpaque(true);
        RedVaultLevitate_Ind.setPreferredSize(new java.awt.Dimension(20, 20));
        jPanel8.add(RedVaultLevitate_Ind, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 60, -1));

        jPanel1.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 10, 200, 169));

        allon.setText("All On");
        allon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allonActionPerformed(evt);
            }
        });
        jPanel1.add(allon, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, -1, -1));

        alloff.setText("All Off");
        alloff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alloffActionPerformed(evt);
            }
        });
        jPanel1.add(alloff, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 150, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(131, 131, 131))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void table_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "1".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_table_amberActionPerformed

    private void table_blueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_blueActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "1".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_table_blueActionPerformed

    private void table_redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_redActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "1".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_table_redActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Table Lights">
    private void table_greenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_table_greenActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "1".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_table_greenActionPerformed

   //</editor-fold>

    /**
     * Called to reset the field back to a standard state - ie not a debugging
     * state.
     *
     * @param evt
     */
    private void forceStandardUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forceStandardUpdateButtonActionPerformed
        // TODO add your handling code here:
        PLC_Sender.getInstance().updatePLC_Lights(true);
        PLC_Sender.getInstance().updatePLC_TeamNum(true);
        PLC_Sender.getInstance().updatePLC_Time(true);
    }//GEN-LAST:event_forceStandardUpdateButtonActionPerformed

//GEN-FIRST:event_alloffActionPerformed
 
//GEN-LAST:event_alloffActionPerformed

    private void allonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allonActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "1".getBytes()[0];
            data[2] = "1".getBytes()[0];
            data[3] = "1".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "1".getBytes()[0];
            data[6] = "1".getBytes()[0];
            data[7] = "1".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "1".getBytes()[0];
            data[10] = "1".getBytes()[0];
            data[11] = "1".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "1".getBytes()[0];
            data[14] = "1".getBytes()[0];
            data[15] = "1".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "1".getBytes()[0];
            data[18] = "1".getBytes()[0];
            data[19] = "1".getBytes()[0];
            data[20] = "1".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_allonActionPerformed

    private void alloffActionPerformed(java.awt.event.ActionEvent evt)
    {
        try{
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);
            
            byte[] data = new byte[21];
            
            for (int i = 0; i < 21; i++){
            data[i] = "0".getBytes()[0];
            }
            //Red lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber lights
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber lights
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Table Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];
            
            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }

        
        
    }
    private void fastspeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastspeedActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "F".getBytes()[0];
            data[2] = "F".getBytes()[0];
            data[3] = "F".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "F".getBytes()[0];
            data[6] = "F".getBytes()[0];
            data[7] = "F".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "F".getBytes()[0];
            data[10] = "F".getBytes()[0];
            data[11] = "F".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "F".getBytes()[0];
            data[14] = "F".getBytes()[0];
            data[15] = "F".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "F".getBytes()[0];
            data[18] = "F".getBytes()[0];
            data[19] = "F".getBytes()[0];
            data[20] = "F".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_fastspeedActionPerformed

    private void mediumspeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumspeedActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "M".getBytes()[0];
            data[2] = "M".getBytes()[0];
            data[3] = "M".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "M".getBytes()[0];
            data[6] = "M".getBytes()[0];
            data[7] = "M".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "M".getBytes()[0];
            data[10] = "M".getBytes()[0];
            data[11] = "M".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "M".getBytes()[0];
            data[14] = "M".getBytes()[0];
            data[15] = "M".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "M".getBytes()[0];
            data[18] = "M".getBytes()[0];
            data[19] = "M".getBytes()[0];
            data[20] = "M".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_mediumspeedActionPerformed

    private void slowblinkallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_slowblinkallActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "S".getBytes()[0];
            data[2] = "S".getBytes()[0];
            data[3] = "S".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "S".getBytes()[0];
            data[6] = "S".getBytes()[0];
            data[7] = "S".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "S".getBytes()[0];
            data[10] = "S".getBytes()[0];
            data[11] = "S".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "S".getBytes()[0];
            data[14] = "S".getBytes()[0];
            data[15] = "S".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "S".getBytes()[0];
            data[18] = "S".getBytes()[0];
            data[19] = "S".getBytes()[0];
            data[20] = "S".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_slowblinkallActionPerformed

    private void blue3_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue3_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "1".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue3_amberActionPerformed

    private void blue3_blueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue3_blueActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "1".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue3_blueActionPerformed

    private void blue2_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue2_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "1".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue2_amberActionPerformed

    private void blue2_blueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue2_blueActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "1".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue2_blueActionPerformed
//</editor-fold>
    private void blue1_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue1_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "1".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue1_amberActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Blue Side">
    private void blue1_blueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blue1_blueActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "1".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_blue1_blueActionPerformed

    private void red3_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red3_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "1".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red3_amberActionPerformed

    private void red3_redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red3_redActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "1".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red3_redActionPerformed

    private void red2_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red2_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "1".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red2_amberActionPerformed

    private void red2_redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red2_redActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "1".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red2_redActionPerformed

    private void red1_amberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red1_amberActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "0".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "1".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red1_amberActionPerformed

    //<editor-fold defaultstate="collapsed" desc="Red Side">
    private void red1_redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_red1_redActionPerformed
        // TODO add your handling code here:
        try {
            String PLC_IP = "10.0.0.7";
            InetAddress address = InetAddress.getByName(PLC_IP);

            byte[] data = new byte[21];

            for (int i = 0; i < 21; i++) {
                data[i] = "0".getBytes()[0];
            }
            data[0] = "L".getBytes()[0];

            //Red Lights
            data[1] = "1".getBytes()[0];
            data[2] = "0".getBytes()[0];
            data[3] = "0".getBytes()[0];
            data[4] = BYTE_CLEAR;
            //Red Amber
            data[5] = "0".getBytes()[0];
            data[6] = "0".getBytes()[0];
            data[7] = "0".getBytes()[0];
            data[8] = BYTE_CLEAR;
            //Blue Lights
            data[9] = "0".getBytes()[0];
            data[10] = "0".getBytes()[0];
            data[11] = "0".getBytes()[0];
            data[12] = BYTE_CLEAR;
            //Blue Amber
            data[13] = "0".getBytes()[0];
            data[14] = "0".getBytes()[0];
            data[15] = "0".getBytes()[0];
            data[16] = BYTE_CLEAR;
            //Stack
            data[17] = "0".getBytes()[0];
            data[18] = "0".getBytes()[0];
            data[19] = "0".getBytes()[0];
            data[20] = "0".getBytes()[0];

            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);

            DatagramSocket dsocket = new DatagramSocket();
            dsocket.send(packet);
            dsocket.close();
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_red1_redActionPerformed
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>

    /**
     * Method to set all of the ESTOP indicators to the ESTOP state and color or
     * not.
     *
     * @param ESTOPPED Whether or not the indicators should reflect being
     * ESTOPPED.
     */
    public void updateAll_ES_Indic(boolean ESTOPPED) {
        if (ESTOPPED) {
            blue1_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            blue2_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            blue3_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            red1_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            red2_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            red3_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
            field_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
        } else {
            blue1_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            blue2_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            blue3_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            red1_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            red2_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            red3_ES_Indic.setBackground(ColorPallate.ES_GRAY);
            field_ES_Indic.setBackground(ColorPallate.ES_GRAY);
        }
    }

    /**
     * Method to set the field ESTOP indicator to the ESTOP state and color.
     *
     * @param ESTOPPED Whether or not the indicator should reflect being
     * ESTOPPED.
     */
    public void updateFieldES(boolean ESTOPPED) {
        if (ESTOPPED) {
            field_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
        } else {
            field_ES_Indic.setBackground(ColorPallate.ES_GRAY);
        }
    }
    public void updateRedVault()
    {
        if(Boost.equals(PLAYED))
        {
            //Add indicator
        }
        if(Force.equals(PLAYED))
        {
            //Add indiactor
        }
        if(Levitate.equals(PLAYED))
        {
            //Add indicator
        }
    }
    
    public void updateBlueVault()
    {
        if(Boost.equals(PLAYED))
        {
            if(FieldAndRobots.powerups == Boost)  
            {
                BlueVaultBoost_ind.setBackground(ColorPallate.ES_GRAY);
            }
        }
        if(Force.equals(PLAYED))
        {
            if(FieldAndRobots.powerups == Force)
            {
                BlueVaultForce_Ind.setBackground(ColorPallate.ES_GRAY);
            }
        
        }
        if(Levitate.equals(PLAYED))
        {
            if(FieldAndRobots.powerups == Levitate)
            {
                BlueVaultLevitate_Ind.setBackground(ColorPallate.ES_GRAY);
            } 
        }
    }
    /**
     * Method to set ESTOP indicators to the ESTOP state and color.
     *
     * @param alli The alliance the indicator belongs to.
     * @param station The station the indicator belongs to.
     * @param ESTOPPED Whether or not the indicator should reflect being
     * ESTOPPED.
     */
    public void updateES_Indic(int alli, int station, boolean ESTOPPED) {
        System.out.println("Updating ESTOP Lights");
        if (alli == FieldAndRobots.RED) {
            if (station == FieldAndRobots.ONE) {
                if (ESTOPPED) {
                    red1_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    red1_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
            if (station == FieldAndRobots.TWO) {
                if (ESTOPPED) {
                    red2_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    red2_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
            if (station == FieldAndRobots.THREE) {
                if (ESTOPPED) {
                    red3_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    red3_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
        } else {
            if (station == FieldAndRobots.ONE) {
                if (ESTOPPED) {
                    blue1_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    blue1_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
            if (station == FieldAndRobots.TWO) {
                if (ESTOPPED) {
                    blue2_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    blue2_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
            if (station == FieldAndRobots.THREE) {
                if (ESTOPPED) {
                    blue3_ES_Indic.setBackground(ColorPallate.ESTOPPED_AMB);
                } else {
                    blue3_ES_Indic.setBackground(ColorPallate.ES_GRAY);
                }
            }
        }
    }
    //
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BlueVaultBoost_ind;
    private javax.swing.JLabel BlueVaultForce_Ind;
    private javax.swing.JLabel BlueVaultIndicator4;
    private javax.swing.JLabel BlueVaultLevitate_Ind;
    private javax.swing.JLabel RedVaultBoost_ind;
    private javax.swing.JLabel RedVaultForce_Ind;
    private javax.swing.JLabel RedVaultIndicator;
    private javax.swing.JLabel RedVaultLevitate_Ind;
    private javax.swing.JButton alloff;
    private javax.swing.JButton allon;
    private javax.swing.JLabel blue1_ES_Indic;
    private javax.swing.JButton blue1_amber;
    private javax.swing.JButton blue1_blue;
    private javax.swing.JLabel blue2_ES_Indic;
    private javax.swing.JButton blue2_amber;
    private javax.swing.JButton blue2_blue;
    private javax.swing.JLabel blue3_ES_Indic;
    private javax.swing.JButton blue3_amber;
    private javax.swing.JButton blue3_blue;
    private javax.swing.JButton fastspeed;
    private javax.swing.JLabel field_ES_Indic;
    private javax.swing.JButton forceStandardUpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton mediumspeed;
    private javax.swing.JLabel red1_ES_Indic;
    private javax.swing.JButton red1_amber;
    private javax.swing.JButton red1_red;
    private javax.swing.JLabel red2_ES_Indic;
    private javax.swing.JButton red2_amber;
    private javax.swing.JButton red2_red;
    private javax.swing.JLabel red3_ES_Indic;
    private javax.swing.JButton red3_amber;
    private javax.swing.JButton red3_red;
    private javax.swing.JButton slowblinkall;
    private javax.swing.JButton table_amber;
    private javax.swing.JButton table_blue;
    private javax.swing.JButton table_green;
    private javax.swing.JButton table_red;
    // End of variables declaration//GEN-END:variables
}
