package UI;

import OFMS.Main;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * Custom panel designed to send messages to the viewmarq displays.
 *
 * Complete System developed by:
 *
 * @author Alex Bassett
 * @author Walton Robotics - Team 2974
 * @author Foundation code developed by Josh, Andrew Lobos, Team 225
 * @author Structural assistance and refactoring by Doug Neumann
 */
public class AD_Custom_Vm extends javax.swing.JPanel {

    /**
     * ArrayList to hold data from messages.txt
     */
    private static ArrayList lines = new ArrayList();
    /**
     * A local instance of AD Custom Vm.
     */
    private static AD_Custom_Vm _instance;

    /**
     * Creates new AD_Custom_Vm
     */
    public AD_Custom_Vm() {
        if (_instance != null) {
        } else {
            System.out.println("Creating AD CUSTOM VIEW");
            initComponents();
            
            takeInFile();
            updateDropdown();
            _instance = this;
        }
    }

    /**
     * Gets the current running instance of this class.
     *
     * @return The current AD_Custom_Vm instance.
     */
    public static AD_Custom_Vm getInstance() {
        if (_instance != null) {
            return _instance;
        } else {
            return _instance = new AD_Custom_Vm();
        }
    }

    /**
     * Takes in the "messages" file, and reads it for, well, messages.
     */
    private void takeInFile() {
        System.out.println("Taking in file...");
        //Reads the file
        String fileName = "messages.txt";
        String line = null;
        try {
            FileReader fileReader = new FileReader(fileName);
            
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            //Adds each line to the ArrayList
            int i = 0;
            while ((line = bufferedReader.readLine()) != null) {
                lines.add(line);
                //System.out.println(line);
                i++;
            }
            
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            System.out.println("Unable to open file '" + fileName + "'");
        } catch (IOException ex) {
            System.out.println("Error reading file '" + fileName + "'");
        }
        System.out.println("Done taking in file...");
    }

    /**
     * This method updates the dropdown bar so that it reflects the current
     * items that are supposedly saved in the code.
     */
    public final void updateDropdown() {
        Msg.send("Updating Dropdown...");
        messages.removeAllItems();
        //Populates the dropdown
        for (int j = 0; j < lines.size(); j++) {
            String messageStr = (String) lines.get(j);
            if (j < 10) {
                System.out.println("Message: " + messageStr);
            }
            String[] parts = messageStr.split(";");
            String num = parts[0];
            String title = parts[1];
            messages.addItem(num + ". " + title);
        }
    }

    /**
     * This gets the list of stored messages.
     *
     * @return The list of stored messages.
     */
    public static ArrayList getLines() {
        return lines;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customSendRedButton = new javax.swing.JButton();
        customMessageField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        customSendBlueButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        messages = new javax.swing.JComboBox();
        predefinedSendRed = new javax.swing.JButton();
        predefinedSendBlue = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        predefiniedSendBoth = new javax.swing.JButton();
        sendCustomBoth = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 0, 0));

        customSendRedButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        customSendRedButton.setText("Red");
        customSendRedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customSendRedButtonActionPerformed(evt);
            }
        });

        customMessageField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        customMessageField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        customMessageField.setText("Welcome to Destination Einstein!!!");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Standard Viewmarq Message");

        customSendBlueButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        customSendBlueButton.setText("Blue");
        customSendBlueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customSendBlueButtonActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("(Text will be set to 4 inch green scrolling text)");

        predefinedSendRed.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        predefinedSendRed.setText("Red");
        predefinedSendRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predefinedSendRedActionPerformed(evt);
            }
        });

        predefinedSendBlue.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        predefinedSendBlue.setText("Blue");
        predefinedSendBlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predefinedSendBlueActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Predefined Messages");
        jLabel3.setToolTipText("");

        predefiniedSendBoth.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        predefiniedSendBoth.setText("Both");
        predefiniedSendBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predefiniedSendBothActionPerformed(evt);
            }
        });

        sendCustomBoth.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        sendCustomBoth.setText("Both");
        sendCustomBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendCustomBothActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(messages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(predefiniedSendBoth)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(predefinedSendRed)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(predefinedSendBlue))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(customMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(sendCustomBoth)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(customSendRedButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(customSendBlueButton))))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(predefinedSendBlue)
                    .addComponent(predefinedSendRed)
                    .addComponent(predefiniedSendBoth))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customMessageField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customSendRedButton)
                    .addComponent(customSendBlueButton)
                    .addComponent(sendCustomBoth))
                .addContainerGap(130, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sends a custom ViewMarq message to the red display
     */
    private void customSendRedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customSendRedButtonActionPerformed
        String custom = customMessageField.getText();
        Msg.send("Clicked - message: " + custom);
        sendCustomMessage(custom, "R");
    }//GEN-LAST:event_customSendRedButtonActionPerformed

    /**
     * Sends a custom ViewMarq message to the blue display
     */
    private void customSendBlueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customSendBlueButtonActionPerformed
        String custom = customMessageField.getText();
        Msg.send("Clicked - message: " + custom);
        sendCustomMessage(custom, "B");
    }//GEN-LAST:event_customSendBlueButtonActionPerformed

    /**
     * Method to make it easy to send a custom string message with default
     * settings to the ViewMarqs.
     *
     * @param message The message to be sent.
     * @param alli Which VM you are sending it to - red("R"), blue("B"), or
     * both("A").
     */
    private void sendCustomMessage(String message, String alli) {
        String frontA = "V" + alli;
        String gobbleDeGuck = "<ID 0><CLR><WIN 0 0 287 31><POS 0 0><SL><S S><BL N><CS 3><GRN><T>";
        String mid = message;
        String ender = "</T>";
        String sendableMsgString = frontA + gobbleDeGuck + mid + ender;
        //
        sendRawMessage(sendableMsgString);
    }
    
    private void sendRawMessage(String rawMessage) {
        Msg.send("Trying to send raw message: " + rawMessage);
        if (rawMessage.length() <= 256) {
            byte[] data = new byte[rawMessage.length()];
            for (int i = 0; i < rawMessage.length(); i++) {
                data[i] = rawMessage.substring(i, i + 1).getBytes()[0];
            }
            
            try {
                String PLC_IP = "10.0.0.7";
                InetAddress address = InetAddress.getByName(PLC_IP);
                DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);
                
                DatagramSocket dsocket = new DatagramSocket();
                dsocket.send(packet);
                dsocket.close();
            } catch (Exception e) {
                System.err.println(e);
            }
            Msg.send("Raw Message Sent");
        } else {
           Msg.send("ERROR - MESSAGE TOO LONG");
            if (Main.getInstance().getMainFrame() != null) {
                JOptionPane.showMessageDialog(Main.getInstance().getMainFrame(),
                        "Error - message and formatting exceeds 256 charachters",
                        "Message Length Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Sends a message chosen from the drop down to the red display
     */
    private void predefinedSendRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predefinedSendRedActionPerformed
        // TODO add your handling code here:
        String commandString = "";
        String selectedMessage = (String) messages.getSelectedItem();
        String[] titleKey = selectedMessage.split("\\. ");
        System.out.println(selectedMessage);
        String lineTitle = titleKey[1].trim();
        System.out.println("Clicked - red predef message: " + lineTitle);
        for (int i = 0; i < lines.size(); i++) {
            String line = (String) lines.get(i);
            if (line.contains(lineTitle)) {
                String current = (String) lines.get(i);
                String[] parts = current.split(";");
                commandString = parts[2];
            }
        }
        
        String sendString = "VR" + commandString;
        
        sendRawMessage(sendString);
    }//GEN-LAST:event_predefinedSendRedActionPerformed

    /**
     * Sends a message chosen from the dropdown to the blue display
     */
    private void predefinedSendBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predefinedSendBlueActionPerformed
        // TODO add your handling code here:
        String commandString = "";
        String selectedMessage = (String) messages.getSelectedItem();
        String[] titleKey = selectedMessage.split("\\. ");
        System.out.println(selectedMessage);
        String lineTitle = titleKey[1].trim();
        System.out.println("Clicked - blue predef message: " + lineTitle);
        for (int i = 0; i < lines.size(); i++) {
            String line = (String) lines.get(i);
            if (line.contains(lineTitle)) {
                String current = (String) lines.get(i);
                String[] parts = current.split(";");
                commandString = parts[2];
            }
        }
        String sendString = "VB" + commandString;
        
        sendRawMessage(sendString);
    }//GEN-LAST:event_predefinedSendBlueActionPerformed

    /**
     * Sends a message chosen from the dropdown to the red and blue displays
     */
    private void predefiniedSendBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predefiniedSendBothActionPerformed
        // TODO add your handling code here:
        String commandString = "";
        String selectedMessage = (String) messages.getSelectedItem();
        System.out.println("Message Key: " + selectedMessage);
        String[] titleKey = selectedMessage.split("\\. ");
//        for (int i = 0; i < titleKey.length; i++) {
//            System.out.println("TK " + i + ": " + titleKey[i]);
//        }
        String lineTitle = titleKey[1].trim();
        Msg.send("Clicked - send both predef message: " + lineTitle);
        for (int i = 0; i < lines.size(); i++) {
            String line = (String) lines.get(i);
            if (line.contains(lineTitle)) {
                String current = (String) lines.get(i);
                String[] parts = current.split(";");
                commandString = parts[2];
            }
        }
        String sendString = "VA" + commandString;
        
        sendRawMessage(sendString);
    }//GEN-LAST:event_predefiniedSendBothActionPerformed

    /**
     * Sends a custom ViewMarq message to both the red and blue displays
     */
    private void sendCustomBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendCustomBothActionPerformed
        // TODO add your handling code here:
        String custom = customMessageField.getText();
        Msg.send("Clicked custom both - message: " + custom);
        sendCustomMessage(custom, "A");
    }//GEN-LAST:event_sendCustomBothActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField customMessageField;
    private javax.swing.JButton customSendBlueButton;
    private javax.swing.JButton customSendRedButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox messages;
    private javax.swing.JButton predefinedSendBlue;
    private javax.swing.JButton predefinedSendRed;
    private javax.swing.JButton predefiniedSendBoth;
    private javax.swing.JButton sendCustomBoth;
    // End of variables declaration//GEN-END:variables
}
//        int cLength = commandString.length();
//        cLength = cLength + 2;
//
//        byte[] data = new byte[cLength];
//
//        for (int i = 0; i < cLength; i++) {
//            data[i] = "0".getBytes()[0];
//        }
//        data[0] = "V".getBytes()[0];
//        data[1] = "A".getBytes()[0];
//        for (int j = 2; j < cLength; j++) {
//            data[j] = commandString.substring(j - 2, j - 1).getBytes()[0];
//        }
//        
//        try {
//            String PLC_IP = "10.0.0.7";
//            InetAddress address = InetAddress.getByName(PLC_IP);
//
//            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);
//
//            DatagramSocket dsocket = new DatagramSocket();
//            dsocket.send(packet);
//            dsocket.close();
//        } catch (Exception e) {
//            System.err.println(e);
//        }
//
//*********************
//
//        try {
//            String PLC_IP = "10.0.0.7";
//            InetAddress address = InetAddress.getByName(PLC_IP);
//
//            int cLength = commandString.length();
//            cLength = cLength + 2;
//
//            byte[] data = new byte[cLength];
//
//            for (int i = 0; i < cLength; i++) {
//                data[i] = "0".getBytes()[0];
//            }
//            data[0] = "V".getBytes()[0];
//            data[1] = "B".getBytes()[0];
//            for (int j = 2; j < cLength; j++) {
//                data[j] = commandString.substring(j - 2, j - 1).getBytes()[0];
//            }
//            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);
//
//            DatagramSocket dsocket = new DatagramSocket();
//            dsocket.send(packet);
//            dsocket.close();
//        } catch (Exception e) {
//            System.err.println(e);
//        }
//
//**************
//
//        try {
//            String PLC_IP = "10.0.0.7";
//            InetAddress address = InetAddress.getByName(PLC_IP);
//
//            int cLength = commandString.length();
//            cLength = cLength + 2;
//
//            byte[] data = new byte[cLength];
//
//            for (int i = 0; i < cLength; i++) {
//                data[i] = "0".getBytes()[0];
//            }
//            data[0] = "V".getBytes()[0];
//            data[1] = "R".getBytes()[0];
//            for (int j = 2; j < cLength; j++) {
//                data[j] = commandString.substring(j - 2, j - 1).getBytes()[0];
//            }
//            DatagramPacket packet = new DatagramPacket(data, data.length, address, 5000);
//
//            DatagramSocket dsocket = new DatagramSocket();
//            dsocket.send(packet);
//            dsocket.close();
//        } catch (Exception e) {
//            System.err.println(e);
//        }
